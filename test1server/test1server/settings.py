"""
Django settings for test1server project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import dj_database_url
import os

# Helper function to convert environment variable strings to booleans
def env_to_bool(env_var_name, default=False):
    value = os.environ.get(env_var_name)
    if value is None:
        return default
    return value.lower() in ('true', '1', 't', 'yes')

# Helper function to get integer from environment variable
def env_to_int(env_var_name, default=0):
    value = os.environ.get(env_var_name)
    if value is None:
        return default
    try:
        # Attempt to remove trailing commas if present, common in .env files
        return int(value.strip(','))
    except ValueError:
        return default

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

DEBUG = env_to_bool('DJANGO_DEBUG', False)

VERCEL_FRONTEND_URL = os.environ.get('VERCEL_FRONTEND_URL')
#RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
#if RENDER_EXTERNAL_HOSTNAME:
#    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').split(',')

# --- CORS Configuration ---
CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS').split(',')
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS').split(',')



SAME_DOMAIN = env_to_bool('SAME_DOMAIN', False)

_samesite_env_val = os.environ.get('CSRF_COOKIE_SAMESITE', 'Lax') 
CSRF_COOKIE_SAMESITE = None if _samesite_env_val.lower() == 'none' else _samesite_env_val
SECURE_SSL_REDIRECT = env_to_bool('SECURE_SSL_REDIRECT', False)
CSRF_COOKIE_SECURE = env_to_bool('CSRF_COOKIE_SECURE', False)
CSRF_COOKIE_NAME = os.environ.get('CSRF_COOKIE_NAME', 'csrftoken')
SESSION_COOKIE_SECURE = env_to_bool('SESSION_COOKIE_SECURE', False)
CSRF_COOKIE_HTTPONLY = env_to_bool('CSRF_COOKIE_HTTPONLY', False) # Allow the frontend to access the token


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'test1',
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'test1.authentication.JWTCookieAuthentication',
   ]
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=env_to_int('ACCESS_TOKEN_LIFETIME_MINUTES', 60)),
    'REFRESH_TOKEN_LIFETIME': timedelta(minutes=env_to_int('REFRESH_TOKEN_LIFETIME_MINUTES', 1200)),
    'ROTATE_REFRESH_TOKENS': env_to_bool('ROTATE_REFRESH_TOKENS', True),
    'BLACKLIST_AFTER_ROTATION': env_to_bool('BLACKLIST_AFTER_ROTATION', True),
    'AUTH_COOKIE_SECURE': env_to_bool('AUTH_COOKIE_SECURE', False),
    'AUTH_COOKIE_SAMESITE': os.environ.get('AUTH_COOKIE_SAMESITE', 'Lax'),
    'AUTH_COOKIE_PATH': '/',
    'AUTH_COOKIE_HTTP_ONLY': env_to_bool('AUTH_COOKIE_HTTP_ONLY', True),
    'AUTH_COOKIE_ACCESS': os.environ.get('AUTH_COOKIE_ACCESS', 'access_token'),
    'AUTH_COOKIE_REFRESH': os.environ.get('AUTH_COOKIE_REFRESH', 'refresh_token'),
    
    #JWT Claims Configuration
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
}

ROOT_URLCONF = 'test1server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'test1server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    DATABASES = {
    'default': dj_database_url.config(
    default=DATABASE_URL, 
    conn_max_age=600, 
    ssl_require=env_to_bool('DATABASE_SSL_REQUIRE', False))
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME_APP'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'HOST': os.environ.get('DB_HOST'),
            'PORT': os.environ.get('DB_PORT'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'test1.User'
